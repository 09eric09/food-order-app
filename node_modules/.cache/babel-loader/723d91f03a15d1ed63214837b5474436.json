{"ast":null,"code":"var _jsxFileName = \"/Users/eric/Desktop/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context'; //default state values that will be updated with the reducer function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initialCart = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.val === 'ADD') {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount; // Check to see if the item is already in the array/cart, if yes, this returns the index\n\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id); //Then get the item from the array by it's index, store it in a variable\n\n    const existingItem = state.items[existingItemIndex]; //If there is an existing item, update the price amount for that item\n\n    let updatedItem;\n    let updatedItems;\n\n    if (existingItem) {\n      updatedItem = { //copy over the existing data for that item object, updated the amount\n        ...existingItem,\n        amount: updatedItem.amount = action.item.amount\n      }; //replace the existing item in the array with the updatedItem\n\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    } else {\n      //If no item already exists, just add the new item to the array\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n\n  return initialCart;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, initialCart); //item argument is the object being passed from MealItem.js\n\n  const addItemToCartHandler = item => {\n    //We then pass object as item to the dispatchCart function to handle state\n    dispatchCart({\n      val: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = item => {}; //state values from the reducer functions that we pass \n  //into the CartContext.Provider that surrounds APP.js\n\n\n  const cartProviderValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return (\n    /*#__PURE__*/\n    //Creating this here instead of managing context in App.js\n    _jsxDEV(CartContext.Provider, {\n      value: cartProviderValue,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(CartProvider, \"MBvolLohh4DUvgvoJe1r5fD8vrU=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","initialCart","items","totalAmount","cartReducer","state","action","val","updatedAmount","item","price","amount","existingItemIndex","findIndex","id","existingItem","updatedItem","updatedItems","concat","CartProvider","props","cartState","dispatchCart","addItemToCartHandler","removeItemFromCartHandler","cartProviderValue","addItem","removeItem","children"],"sources":["/Users/eric/Desktop/food-order-app/src/store/CartProvider.js"],"sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from './cart-context';\n\n//default state values that will be updated with the reducer function\nlet initialCart = {\n  items: [],\n  totalAmount: 0,\n}\n\nconst cartReducer = (state, action) => {\n  if (action.val === 'ADD') {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount;\n    // Check to see if the item is already in the array/cart, if yes, this returns the index\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    //Then get the item from the array by it's index, store it in a variable\n    const existingItem = state.items[existingItemIndex];\n    //If there is an existing item, update the price amount for that item\n    let updatedItem;\n    let updatedItems;\n    if (existingItem) {\n      updatedItem = {\n        //copy over the existing data for that item object, updated the amount\n        ...existingItem,\n        amount: updatedItem.amount = action.item.amount,\n      }\n      //replace the existing item in the array with the updatedItem\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    } else {\n      //If no item already exists, just add the new item to the array\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n  return initialCart;\n}\n\nconst CartProvider = (props) => {\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, initialCart);\n  //item argument is the object being passed from MealItem.js\n  const addItemToCartHandler = (item) => {\n    //We then pass object as item to the dispatchCart function to handle state\n    dispatchCart({val:'ADD', item:item});\n  }\n\n  const removeItemFromCartHandler = (item) => {\n\n  }\n\n  //state values from the reducer functions that we pass \n  //into the CartContext.Provider that surrounds APP.js\n    const cartProviderValue = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler, \n        removeItem: removeItemFromCartHandler,\n    };\n\n  return (\n    //Creating this here instead of managing context in App.js\n    <CartContext.Provider value={cartProviderValue}>\n        {props.children}\n    </CartContext.Provider>\n  )\n}\n\nexport default CartProvider;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,IAAIC,WAAW,GAAG;EAChBC,KAAK,EAAE,EADS;EAEhBC,WAAW,EAAE;AAFG,CAAlB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,IAAIA,MAAM,CAACC,GAAP,KAAe,KAAnB,EAA0B;IACxB,MAAMC,aAAa,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA1E,CADwB,CAExB;;IACA,MAAMC,iBAAiB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAtD,CAA1B,CAHwB,CAIxB;;IACA,MAAMC,YAAY,GAAGV,KAAK,CAACH,KAAN,CAAYU,iBAAZ,CAArB,CALwB,CAMxB;;IACA,IAAII,WAAJ;IACA,IAAIC,YAAJ;;IACA,IAAIF,YAAJ,EAAkB;MAChBC,WAAW,GAAG,EACZ;QACA,GAAGD,YAFS;QAGZJ,MAAM,EAAEK,WAAW,CAACL,MAAZ,GAAqBL,MAAM,CAACG,IAAP,CAAYE;MAH7B,CAAd,CADgB,CAMhB;;MACAM,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACH,KAAV,CAAf;MACAe,YAAY,CAACL,iBAAD,CAAZ,GAAkCI,WAAlC;IACD,CATD,MASO;MACL;MACAC,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;IACD;;IAED,OAAO;MACLP,KAAK,EAAEe,YADF;MAELd,WAAW,EAAEK;IAFR,CAAP;EAID;;EACD,OAAOP,WAAP;AACD,CA9BD;;AAgCA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAE9B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,UAAU,CAACK,WAAD,EAAcH,WAAd,CAA5C,CAF8B,CAG9B;;EACA,MAAMsB,oBAAoB,GAAId,IAAD,IAAU;IACrC;IACAa,YAAY,CAAC;MAACf,GAAG,EAAC,KAAL;MAAYE,IAAI,EAACA;IAAjB,CAAD,CAAZ;EACD,CAHD;;EAKA,MAAMe,yBAAyB,GAAIf,IAAD,IAAU,CAE3C,CAFD,CAT8B,CAa9B;EACA;;;EACE,MAAMgB,iBAAiB,GAAG;IACtBvB,KAAK,EAAEmB,SAAS,CAACnB,KADK;IAEtBC,WAAW,EAAEkB,SAAS,CAAClB,WAFD;IAGtBuB,OAAO,EAAEH,oBAHa;IAItBI,UAAU,EAAEH;EAJU,CAA1B;EAOF;IAAA;IACE;IACA,QAAC,WAAD,CAAa,QAAb;MAAsB,KAAK,EAAEC,iBAA7B;MAAA,UACKL,KAAK,CAACQ;IADX;MAAA;MAAA;MAAA;IAAA;EAFF;AAMD,CA5BD;;GAAMT,Y;;KAAAA,Y;AA8BN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}